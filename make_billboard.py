#! /usr/bin/env python

import sys, getopt
import io
import base64

from PIL import Image
from PIL import ImageFont
from PIL import ImageDraw

from datetime import datetime


def make_billboard(text, objFlag=False, objName=""):
  font = ImageFont.truetype("/Library/Fonts/Times New Roman Bold.ttf", 32)

  text_size = font.getsize(text)

  img_size = (text_size[0]+20, text_size[1]+20)
  img = Image.new('RGBA', img_size, (128,128,128,0))
  print(img)
  draw = ImageDraw.Draw(img)

  draw.text( (10,10), text, (255,255,255), font=font )

  if not objFlag:

    with io.BytesIO() as output:

      img.save(output, format='PNG')
      contents = output.getvalue()

    img_text = "data:image/png;base64," + base64.b64encode(contents).decode("utf-8")

  else:
    img.save(objName+".png")

  #print (text_size)
  bwidth = (text_size[0]+20) / (text_size[1]+20)
  #print (bwidth)

  result = []

  if not objFlag:
    result.append("<Shape>")
    result.append("  <Appearance>")
    result.append("    <ImageTexture url=\"{0}\"/>".format(img_text))
    result.append("  </Appearance>")
    result.append("  <IndexedFaceSet solid='false' coordIndex='0 1 2 -1 0 2 3 -1'>")
    result.append("    <Coordinate point='0 0 0  {0:.4g} 0 0  {0:.4g} 1 0  0 1 0'/>".format(bwidth) )
    result.append("    <TextureCoordinate point='0 0 1 0 1 1 0 1'/>")
    result.append("   </IndexedFaceSet>")
    result.append("</Shape>")

  else:
    fobj = open(objName+".obj", 'w')
    fobj.write("# generated by Dave's make_billboard.py\n")
    fobj.write("# " + datetime.now().strftime('%Y-%m-%d %H:%M:%S') + "\n" )

    fobj.write("mtllib " + objName + ".mtl\n")

    fobj.write("v 0 0 0\n")
    fobj.write("vt 0 0\n")
    fobj.write("v {0:.4g} 0 0\n".format(bwidth))
    fobj.write("vt 1 0\n")
    fobj.write("v {0:.4g} 1 0\n".format(bwidth))
    fobj.write("vt 1 1\n")
    fobj.write("v 0 1 0\n")
    fobj.write("vt 0 1\n")

    fobj.write("usemtl " + objName+"MTL\n")

    fobj.write("f 1/1 2/2 3/3\n")
    fobj.write("f 1/1 3/3 4/4\n")
    fobj.close()

    fmtl = open(objName+".mtl", 'w')
    fmtl.write("# generated by Dave's make_billboard.py\n")
    fmtl.write("# " + datetime.now().strftime('%Y-%m-%d %H:%M:%S') + "\n" )
    fmtl.write("newmtl "+objName+"MTL\n")
    fmtl.write("Ka 1.0 1.0 1.0\n")
    fmtl.write("Kd 1.0 1.0 1.0\n")
    fmtl.write("Ks 0.0 0.0 0.0\n")
    fmtl.write("d .8\n")
    fmtl.write("Tr .2\n")
    fmtl.write("illum 1\n")
    fmtl.write("Ns 0.0\n")
    fmtl.write("map_Kd "+objName+".png\n")
    fmtl.close()

  return result


def usage():
  print ("")
  print ("make_billboard.py [options] string1 ... stringN")
  print (" -h, --help     This usage message")
  print (" --obj name     Output OBJ root name")
  print ("")

if __name__ == '__main__':

  objName = ""
  objFlag = False


  try:
    opts, args = getopt.getopt( sys.argv[1:], "h",
            [ "help", "obj=" ] )
  except getopt.GetoptError as err:
    print (str(err))
    usage()
    sys.exit(1)


  for o, a in opts:
    if o in ("-h", "--help"):
      usage()
      sys.exit()
    elif o in ( "--obj"):
      objName = a
      objFlag = True
    else:
      assert False, "unhandled option"



  if not objFlag:
    print ("<X3D>")
    print ("<Scene>")

    for t in args:
      for l in make_billboard(t):
        print (l)

    print ("</Scene>")
    print ("</X3D>")

  else:
    make_billboard(args[0], objFlag, objName)
